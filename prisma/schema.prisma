generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email                                   String?          @unique
  username                                String?          @unique
  signature                               String?          @unique
  signedMessage                           String?
  signer                                  String           @unique
  publicKey                               String?
  signDate                                DateTime?
  createdAt                               DateTime         @default(now())
  updatedAt                               DateTime         @updatedAt
  avatar                                  String?
  id                                      String           @id @default(uuid()) @db.Uuid
  acceptedTerms                           Boolean          @default(false)
  discordLink                             String?
  facebookLink                            String?
  telegramLink                            String?
  twitterLink                             String?
  webURL                                  String?
  coverImage                              String?
  bio                                     String?
  shortLink                               String?          @unique
  accountStatus                           Boolean          @default(false)
  verifyEmail                             Boolean          @default(false)
  followers                               Int?             @default(0)
  following                               Int?             @default(0)
  nftCreator                              NFT[]
  nftCollection                           UserCollection[]
  UserFollow_UserFollow_followerIdToUser  UserFollow[]     @relation("UserFollow_followerIdToUser")
  UserFollow_UserFollow_userIdToUser      UserFollow[]     @relation("UserFollow_userIdToUser")
  nftsOwnership                           UserNFT[]
  UserProject                             UserProject[]
}

model NFT {
  id                                      String     @db.VarChar(255)
  name                                    String
  createdAt                               DateTime   @default(now())
  updatedAt                               DateTime   @updatedAt
  status                                  TX_STATUS
  tokenUri                                String
  txCreationHash                          String
  creatorId                               String?    @db.Uuid
  collectionId                            String     @db.Uuid
  image                                   String?
  u2uId                                   String?    @db.VarChar(255)
  description                             String?
  animationUrl                            String?
  nameSlug                                String?
  collection                              Collection @relation(fields: [collectionId], references: [id])
  creator                                 User?      @relation(fields: [creatorId], references: [id])
  Trait                                   Trait[]
  UserNFT                                 UserNFT[]
  MarketplaceByTokenId                    MarketplaceStatus[] @relation("Marketplace_byId")

  @@id([id, collectionId])
  @@index([u2uId, collectionId])
}

model UserNFT {
  userId                                  String @db.Uuid
  nftId                                   String @db.VarChar(255)
  quantity                                Int    @default(1)
  collectionId                            String @db.Uuid
  NFT                                     NFT    @relation(fields: [nftId, collectionId], references: [id, collectionId])
  user                                    User   @relation(fields: [userId], references: [id])

  @@id([userId, nftId, collectionId])
}

model Collection {
  id                                      String           @id @default(uuid()) @db.Uuid
  txCreationHash                          String           @unique
  name                                    String           @unique
  symbol                                  String
  description                             String?
  status                                  TX_STATUS
  type                                    CONTRACT_TYPE
  categoryId                              Int?
  createdAt                               DateTime         @default(now())
  updatedAt                               DateTime         @updatedAt
  address                                 String?          @unique
  shortUrl                                String?          @unique
  metadata                                String?
  coverImage                              String?
  avatar                                  String?
  projectId                               String?          @unique @db.Uuid
  isU2U                                   Boolean          @default(true)
  nameSlug                                String?
  isVerified                              Boolean          @default(false)
  floorPrice                              BigInt           @default(0)
  category                                Category?        @relation(fields: [categoryId], references: [id])
  Project                                 Project?         @relation(fields: [projectId], references: [id])
  nfts                                    NFT[]
  creators                                UserCollection[]

  @@index([address], type: Hash)
}

model UserCollection {
  userId                                  String     @db.Uuid
  collectionId                            String     @db.Uuid
  collection                              Collection @relation(fields: [collectionId], references: [id])
  user                                    User       @relation(fields: [userId], references: [id])

  @@id([userId, collectionId])
}

model Category {
  id                                      Int          @id @default(autoincrement())
  name                                    String
  collection                              Collection[]
}

model Trait {
  id                                      String  @id @default(uuid()) @db.Uuid
  value                                   String
  nftId                                   String
  display_type                            String?
  trait_type                              String
  collectionId                            String  @db.Uuid
  NFT                                     NFT     @relation(fields: [nftId, collectionId], references: [id, collectionId])

  @@index([nftId, collectionId])
}

model Project {
  id                                      String           @id @db.Uuid
  idOnchain                               Int
  name                                    String
  banner                                  String?
  description                             String?
  organization                            String?
  website                                 String?
  shortLink                               String?
  isActivated                             Boolean          @default(false)
  details                                 Json[]           @default([])
  discord                                 String?
  facebook                                String?
  instagram                               String?
  logo                                    String?
  telegram                                String?
  twitter                                 String?
  Collection                              Collection?
  ProjectRound                            ProjectRound[]
  RoundRangeTime                          RoundRangeTime[]
  UserProject                             UserProject[]
}

model ProjectRound {
  projectId                               String    @db.Uuid
  address                                 String?
  end                                     DateTime
  start                                   DateTime
  roundId                                 Int
  claimableStart                          DateTime  @default(now())
  maxPerWallet                            Int?
  price                                   String?
  totalNftt                               Int?
  claimableIds                            String[]  @default([])
  instruction                             String?
  requiredStaking                         String?
  stakeBefore                             DateTime?
  Project                                 Project   @relation(fields: [projectId], references: [id])
  RoundInfo                               RoundInfo @relation(fields: [roundId], references: [id])

  @@id([projectId, roundId])
}

model RoundInfo {
  name                                    String?
  description                             String?
  id                                      Int              @id @default(autoincrement())
  type                                    String?
  ProjectRound                            ProjectRound[]
  RoundRangeTime                          RoundRangeTime[]
}

model UserProject {
  userId                                  String    @db.Uuid
  projectId                               String    @db.Uuid
  subscribeDate                           DateTime  @default(now())
  stakingTotal                            String?
  lastDateRecord                          DateTime? @default(now())
  Project                                 Project   @relation(fields: [projectId], references: [id])
  User                                    User      @relation(fields: [userId], references: [id])

  @@id([userId, projectId])
}

model RoundRangeTime {
  id                                      String    @id @db.Uuid
  roundId                                 Int
  projectId                               String    @db.Uuid
  start                                   DateTime
  end                                     DateTime
  Project                                 Project   @relation(fields: [projectId], references: [id])
  RoundInfo                               RoundInfo @relation(fields: [roundId], references: [id])
}

model UserFollow {
  userId                                  String  @db.Uuid
  followerId                              String  @db.Uuid
  isFollow                                Boolean @default(true)
  User_UserFollow_followerIdToUser        User    @relation("UserFollow_followerIdToUser", fields: [followerId], references: [id])
  User_UserFollow_userIdToUser            User    @relation("UserFollow_userIdToUser", fields: [userId], references: [id])

  @@id([userId, followerId])
}

enum TX_STATUS {
  PENDING
  SUCCESS
  FAILED
}

enum CONTRACT_TYPE {
  ERC1155
  ERC721
}

enum SELL_STATUS {
  AskNew
  AskCancel
  Trade
  AcceptBid
  Bid
  CancelBid
}

model MarketplaceStatus {
  id                                      Int @id @default(autoincrement())
  tokenId                                 String  @db.VarChar(255)
  collectionId                            String  @db.Uuid
  quoteToken                              String?  @db.VarChar(255)
  timestamp                               Int  
  price                                   Float
  priceWei                                String
  netPrice                                Float
  netPriceWei                             String
  event                                   SELL_STATUS
  quantity                                Int     @default(1)
  operationId                             String?
  txHash                                  String?
  operation                               String?
  from                                    String?
  askId                                   String?
  nftById                                 NFT     @relation("Marketplace_byId", fields: [tokenId, collectionId], references: [id, collectionId], map: "marketplace_by_id_fk") 
  @@index([tokenId, collectionId])
}

model SyncMasterData{
  timestamp      Int                      @default(0)
  type           CONTRACT_TYPE            @id
  syncDataStatus Boolean                  @default(true)
}




