generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email                                   String?          @unique
  username                                String?          @unique
  signature                               String?          @unique
  signedMessage                           String?
  signer                                  String           @unique
  publicKey                               String?
  signDate                                DateTime?
  createdAt                               DateTime         @default(now())
  updatedAt                               DateTime         @updatedAt
  avatar                                  String?
  id                                      String           @id @default(uuid()) @db.Uuid
  acceptedTerms                           Boolean          @default(false)
  discordLink                             String?
  facebookLink                            String?
  telegramLink                            String?
  twitterLink                             String?
  webURL                                  String?
  coverImage                              String?
  bio                                     String?
  shortLink                               String?          @unique
  accountStatus                           Boolean          @default(false)
  verifyEmail                             Boolean          @default(false)
  followers                               Int?             @default(0)
  following                               Int?             @default(0)
  nftCreator                              NFT[]
  nftCollection                           UserCollection[]
  UserFollow_UserFollow_followerIdToUser  UserFollow[]     @relation("UserFollow_followerIdToUser")
  UserFollow_UserFollow_userIdToUser      UserFollow[]     @relation("UserFollow_userIdToUser")
  nftsOwnership                           UserNFT[]
  UserProject                             UserProject[]
  isActive                                Boolean          @default(true)
  metricPoint                             BigInt?          @default(0)
  metricDetail                            Json?            @default("{\"Verified\":0,\"Followers\":{\"key\":\"follower_lv0\",\"value\":0,\"point\":0,\"total\":0},\"CollectionMetric\":0,\"VolumeIndividual\":0}")
  takes                                   Order[]          @relation(name: "UserTaker")
  makes                                   Order[]          @relation(name: "UserMaker")
}

model NFT {
  id                                      String     @db.VarChar(255)
  name                                    String
  createdAt                               DateTime   @default(now())
  updatedAt                               DateTime   @updatedAt
  status                                  TX_STATUS
  tokenUri                                String
  txCreationHash                          String
  creatorId                               String?    @db.Uuid
  collectionId                            String     @db.Uuid
  image                                   String?
  u2uId                                   String?    @db.VarChar(255)
  description                             String?
  animationUrl                            String?
  nameSlug                                String?
  collection                              Collection @relation(fields: [collectionId], references: [id])
  creator                                 User?      @relation(fields: [creatorId], references: [id])
  Trait                                   Trait[]
  UserNFT                                 UserNFT[]
  MarketplaceByTokenId                    MarketplaceStatus[] @relation("Marketplace_byId")
  OrderByTokenId                          Order[] @relation("Order_byId")
  metricPoint                             BigInt?            @default(0)
  metricDetail                            Json?              @default("{\"VolumeIndividual\":0,\"UserMetric\":0}")
  source                                  String?

  @@id([id, collectionId])
  @@index([u2uId, collectionId])
}

model UserNFT {
  userId                                  String @db.Uuid
  nftId                                   String @db.VarChar(255)
  quantity                                Int    @default(1)
  collectionId                            String @db.Uuid
  NFT                                     NFT    @relation(fields: [nftId, collectionId], references: [id, collectionId])
  user                                    User   @relation(fields: [userId], references: [id])

  @@id([userId, nftId, collectionId])
}

model Collection {
  id                                      String           @id @default(uuid()) @db.Uuid
  txCreationHash                          String           @unique
  name                                    String           @unique
  symbol                                  String
  description                             String?
  status                                  TX_STATUS
  type                                    CONTRACT_TYPE
  categoryId                              Int?
  createdAt                               DateTime         @default(now())
  updatedAt                               DateTime         @updatedAt
  address                                 String?          @unique
  shortUrl                                String?          @unique
  metadata                                String?
  coverImage                              String?
  avatar                                  String?
  projectId                               String?          @unique @db.Uuid
  isU2U                                   Boolean          @default(true)
  nameSlug                                String?
  isVerified                              Boolean          @default(false)
  floorPrice                              BigInt           @default(0)
  category                                Category?        @relation(fields: [categoryId], references: [id])
  Project                                 Project?         @relation(fields: [projectId], references: [id])
  nfts                                    NFT[]
  creators                                UserCollection[]
  isActive                                Boolean            @default(true)
  flagExtend                              Boolean?           @default(false)
  isSync                                  Boolean?           @default(true)
  subgraphUrl                             String?            
  lastTimeSync                            Int?               @default(0)
  metricPoint                             BigInt?            @default(0)
  metricDetail                            Json?              @default("{\"Verified\":0,\"Volume\":{\"key\":\"volume_lv0\",\"value\":\"0\",\"point\":0,\"total\":0},\"TotalUniqueOwner\":{\"key\":\"owner_lv0\",\"value\":\"0\",\"point\":0,\"total\":0},\"TotalItems\":{\"key\":\"item_lv0\",\"value\":0,\"point\":0,\"total\":0},\"Followers\":{\"key\":\"follower_lv0\",\"value\":0,\"point\":0,\"total\":0}}")
  source                                  String?
  AnalysisCollection                      AnalysisCollection[]
  @@index([address], type: Hash)
}

model UserCollection {
  userId                                  String     @db.Uuid
  collectionId                            String     @db.Uuid
  collection                              Collection @relation(fields: [collectionId], references: [id])
  user                                    User       @relation(fields: [userId], references: [id])

  @@id([userId, collectionId])
}

model Category {
  id                                      Int          @id @default(autoincrement())
  name                                    String
  collection                              Collection[]
}

model Trait {
  id                                      String  @id @default(uuid()) @db.Uuid
  value                                   String
  nftId                                   String
  display_type                            String?
  trait_type                              String
  collectionId                            String  @db.Uuid
  NFT                                     NFT     @relation(fields: [nftId, collectionId], references: [id, collectionId])

  @@index([nftId, collectionId])
}

model Project {
  id                                      String           @id @db.Uuid
  idOnchain                               Int
  name                                    String
  banner                                  String?
  description                             String?
  organization                            String?
  website                                 String?
  shortLink                               String?
  isActivated                             Boolean          @default(false)
  details                                 Json[]           @default([])
  discord                                 String?
  facebook                                String?
  instagram                               String?
  logo                                    String?
  telegram                                String?
  twitter                                 String?
  Collection                              Collection?
  ProjectRound                            ProjectRound[]
  RoundRangeTime                          RoundRangeTime[]
  UserProject                             UserProject[]
}

model ProjectRound {
  projectId                               String    @db.Uuid
  address                                 String?
  end                                     DateTime
  start                                   DateTime
  roundId                                 Int
  claimableStart                          DateTime  @default(now())
  maxPerWallet                            Int?
  price                                   String?
  totalNftt                               Int?
  claimableIds                            String[]  @default([])
  instruction                             String?
  requiredStaking                         String?
  stakeBefore                             DateTime?
  Project                                 Project   @relation(fields: [projectId], references: [id])
  RoundInfo                               RoundInfo @relation(fields: [roundId], references: [id])

  @@id([projectId, roundId])
}

model RoundInfo {
  name                                    String?
  description                             String?
  id                                      Int              @id @default(autoincrement())
  type                                    String?
  ProjectRound                            ProjectRound[]
  RoundRangeTime                          RoundRangeTime[]
}

model UserProject {
  userId                                  String    @db.Uuid
  projectId                               String    @db.Uuid
  subscribeDate                           DateTime  @default(now())
  stakingTotal                            String?
  lastDateRecord                          DateTime? @default(now())
  Project                                 Project   @relation(fields: [projectId], references: [id])
  User                                    User      @relation(fields: [userId], references: [id])

  @@id([userId, projectId])
}

model RoundRangeTime {
  id                                      String    @id @db.Uuid
  roundId                                 Int
  projectId                               String    @db.Uuid
  start                                   DateTime
  end                                     DateTime
  Project                                 Project   @relation(fields: [projectId], references: [id])
  RoundInfo                               RoundInfo @relation(fields: [roundId], references: [id])
}

model UserFollow {
  userId                                  String  @db.Uuid
  followerId                              String  @db.Uuid
  isFollow                                Boolean @default(true)
  User_UserFollow_followerIdToUser        User    @relation("UserFollow_followerIdToUser", fields: [followerId], references: [id])
  User_UserFollow_userIdToUser            User    @relation("UserFollow_userIdToUser", fields: [userId], references: [id])

  @@id([userId, followerId])
}

enum TX_STATUS {
  PENDING
  SUCCESS
  FAILED
}

enum CONTRACT_TYPE {
  ERC1155
  ERC721
}

enum SELL_STATUS {
  AskNew
  AskCancel
  Trade
  AcceptBid
  Bid
  CancelBid
}

model MarketplaceStatus {
  id                                      Int             @id @default(autoincrement())
  tokenId                                 String          @db.VarChar(255)
  collectionId                            String          @db.Uuid
  quoteToken                              String?         @db.VarChar(255)
  timestamp                               Int  
  price                                   Float
  priceWei                                String
  netPrice                                Float
  netPriceWei                             String
  event                                   SELL_STATUS
  quantity                                Int             @default(1)
  operationId                             String?
  txHash                                  String?
  operation                               String?
  from                                    String?
  askId                                   String?
  metricPoint                             BigInt?         @default(0)
  nftById                                 NFT             @relation("Marketplace_byId", fields: [tokenId, collectionId], references: [id, collectionId], map: "marketplace_by_id_fk") 
  @@index([tokenId, collectionId])
}

model SyncMasterData{
  timestamp                               Int              @default(0)
  type                                    SYNCDATASTATUS   @id
  syncDataStatus                          Boolean          @default(true)
}

model QuoteTokens {
  address                                 String          @id @unique
  symbol                                  String
  name                                    String
  derivedETH                              Float
  derivedUSD                              Float
}

model AnalysisCollection {
  id                                      String          @id
  collectionId                            String          @db.Uuid
  keyTime                                 String
  address                                 String  
  type                                    CONTRACT_TYPE
  volume                                  Decimal         @default(0) @db.Decimal(78, 0)
  volumeWei                               String          @default("0")
  floorPrice                              BigInt          @default(0)
  items                                   BigInt          @default(0)
  owner                                   BigInt          @default(0)
  createdAt                               DateTime        @default(now()) @db.Date
  collection                              Collection      @relation(fields: [collectionId], references: [id])
}


model Order {
  index                                   Int              @default(1) 
  sig                                     String          
  makerId                                 String           @db.Uuid
  makeAssetType                           Int
  makeAssetAddress                        String           //  U2U Native address , Collection Address
  makeAssetValue                          String
  makeAssetId                             String           //  U2U native => 0 , Order NFT => NFT ID
  takerId                                 String?          @db.Uuid
  takeAssetType                           Int
  takeAssetAddress                        String           //  U2U Native address , Collection Address
  takeAssetValue                          String           
  takeAssetId                             String           //  U2U native => 0 , Order NFT => NFT ID
  salt                                    String           
  start                                   Int              @default(0)
  end                                     Int              @default(0)
  orderStatus                             ORDERSTATUS      @default(OPEN)
  orderType                               ORDERTYPE
  root                                    String           @default("0x0000000000000000000000000000000000000000000000000000000000000000")
  proof                                   String[]         @default([])
  tokenId                                 String           @db.VarChar(255)
  collectionId                            String           @db.Uuid 
  quantity                                Int              @default(1)
  price                                   String           @default("0")
  priceNum                                Float            @default(0)
  netPrice                                String           @default("0")
  netPriceNum                             Float            @default(0)
  createAt                                DateTime         @default(now())
  updatedAt                               DateTime?        @updatedAt         
  quoteToken                              String            
  filled                                  Int              @default(0)   // Quanity filled order
  Maker                                   User             @relation(fields: [makerId], references: [id], name: "UserMaker")
  Taker                                   User?            @relation(fields: [takerId], references: [id], name: "UserTaker")
  nftById                                 NFT              @relation("Order_byId", fields: [tokenId, collectionId], references: [id, collectionId], map: "order_by_id_fk") 
  @@id([sig, index])
  @@index([sig, index])
}


enum ORDERSTATUS {
  OPEN
  PENDING
  CANCELLED
  FILLED
}

enum ORDERTYPE {
  BID
  BULK   // SELL MULTIPLE
  SINGLE // SELL 1 
}

enum SYNCDATASTATUS {
  ERC1155
  ERC721
  ORDER
}